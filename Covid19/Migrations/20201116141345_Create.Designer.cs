// <auto-generated />
using System;
using Covid19;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Covid19.Migrations
{
    [DbContext(typeof(CovidDbContext))]
    [Migration("20201116141345_Create")]
    partial class Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Covid19.Citizen", b =>
                {
                    b.Property<string>("SSN")
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("MunicipalityID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT");

                    b.HasKey("SSN");

                    b.HasIndex("MunicipalityID");

                    b.ToTable("Citizen");
                });

            modelBuilder.Entity("Covid19.CitizenLocation", b =>
                {
                    b.Property<string>("SSN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Addr")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("SSN");

                    b.HasIndex("Addr");

                    b.ToTable("CitizenLocation");
                });

            modelBuilder.Entity("Covid19.Location", b =>
                {
                    b.Property<string>("Addr")
                        .HasColumnType("TEXT");

                    b.Property<int>("MunicipalityID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Addr");

                    b.HasIndex("MunicipalityID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Covid19.Municipality", b =>
                {
                    b.Property<int>("MunicipalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NationName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Population")
                        .HasColumnType("INTEGER");

                    b.Property<string>("mName")
                        .HasColumnType("TEXT");

                    b.HasKey("MunicipalityID");

                    b.HasIndex("NationName");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("Covid19.Nation", b =>
                {
                    b.Property<string>("NationName")
                        .HasColumnType("TEXT");

                    b.HasKey("NationName");

                    b.ToTable("Nation");
                });

            modelBuilder.Entity("Covid19.TestCenter", b =>
                {
                    b.Property<int>("CenterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hours")
                        .HasColumnType("TEXT");

                    b.Property<int>("MunicipalityID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CenterID");

                    b.HasIndex("MunicipalityID");

                    b.ToTable("Testcenter");
                });

            modelBuilder.Entity("Covid19.TestCenterManagement", b =>
                {
                    b.Property<int>("PhoneNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CenterID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.HasKey("PhoneNum");

                    b.HasIndex("CenterID")
                        .IsUnique();

                    b.ToTable("Testcentermanagement");
                });

            modelBuilder.Entity("Covid19.TestedAt", b =>
                {
                    b.Property<string>("SSN")
                        .HasColumnType("TEXT");

                    b.Property<int>("CenterID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Result")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("SSN");

                    b.HasIndex("CenterID");

                    b.ToTable("TestedAt");
                });

            modelBuilder.Entity("Covid19.Citizen", b =>
                {
                    b.HasOne("Covid19.Municipality", "municipality")
                        .WithMany("citizens")
                        .HasForeignKey("MunicipalityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("municipality");
                });

            modelBuilder.Entity("Covid19.CitizenLocation", b =>
                {
                    b.HasOne("Covid19.Location", "location")
                        .WithMany("citizenLocations")
                        .HasForeignKey("Addr");

                    b.HasOne("Covid19.Citizen", "citizen")
                        .WithMany("citizenLocations")
                        .HasForeignKey("SSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("citizen");

                    b.Navigation("location");
                });

            modelBuilder.Entity("Covid19.Location", b =>
                {
                    b.HasOne("Covid19.Municipality", "municipality")
                        .WithMany("locations")
                        .HasForeignKey("MunicipalityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("municipality");
                });

            modelBuilder.Entity("Covid19.Municipality", b =>
                {
                    b.HasOne("Covid19.Nation", "nation")
                        .WithMany("municipalities")
                        .HasForeignKey("NationName");

                    b.Navigation("nation");
                });

            modelBuilder.Entity("Covid19.TestCenter", b =>
                {
                    b.HasOne("Covid19.Municipality", "municipality")
                        .WithMany("testCenters")
                        .HasForeignKey("MunicipalityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("municipality");
                });

            modelBuilder.Entity("Covid19.TestCenterManagement", b =>
                {
                    b.HasOne("Covid19.TestCenter", "testCenter")
                        .WithOne("testCenterMangement")
                        .HasForeignKey("Covid19.TestCenterManagement", "CenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("testCenter");
                });

            modelBuilder.Entity("Covid19.TestedAt", b =>
                {
                    b.HasOne("Covid19.TestCenter", "testCenter")
                        .WithMany("testedAts")
                        .HasForeignKey("CenterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Covid19.Citizen", "citizen")
                        .WithMany("testedAts")
                        .HasForeignKey("SSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("citizen");

                    b.Navigation("testCenter");
                });

            modelBuilder.Entity("Covid19.Citizen", b =>
                {
                    b.Navigation("citizenLocations");

                    b.Navigation("testedAts");
                });

            modelBuilder.Entity("Covid19.Location", b =>
                {
                    b.Navigation("citizenLocations");
                });

            modelBuilder.Entity("Covid19.Municipality", b =>
                {
                    b.Navigation("citizens");

                    b.Navigation("locations");

                    b.Navigation("testCenters");
                });

            modelBuilder.Entity("Covid19.Nation", b =>
                {
                    b.Navigation("municipalities");
                });

            modelBuilder.Entity("Covid19.TestCenter", b =>
                {
                    b.Navigation("testCenterMangement");

                    b.Navigation("testedAts");
                });
#pragma warning restore 612, 618
        }
    }
}
